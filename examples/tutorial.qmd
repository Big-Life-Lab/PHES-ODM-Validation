---
title: "ODM Validation Tutorial"
format: html
jupyter: python3
---

The goal of the ODM-validation library is to provide an easy way of checking
that your data is ODM-compliant, by validating it against a rule-based schema.

Let's take a look at how you might use this library to validate your data.

# Dependencies

After checking out the repository you can setup the package dependencies with
the following commands:

```{bash}
cd <repo-dir>
pip install -r requirements.txt
```

# Code setup

```{python}
#| echo: false

# specify the package path
import sys
sys.path.append("../src")
```

```{python}
# stdlib
from os.path import join  # for constructing file paths

# odm-validation
import odm_validation.utils as utils
from odm_validation.validation import generate_cerberus_schema, validate_data

# our asset directory
ASSET_DIR = "../assets/"
```


# Validation

To run the validation you will need your own dataset as a CSV-file, and a
validation schema specific to the version of the ODM you're using.

In this example we'll validate a table of samples with the default schema. The
`validate_data` can take multiple tables at once, so we need to wrap our
sample-data in a dictionary with the table-name as the key.

```{python}
schema = utils.import_schema(join(ASSET_DIR, "validation-schemas/schema-v2.yml"))
samples = utils.import_dataset("samples.csv")
data = {"samples": samples}
errors = validate_data(schema, data)
print("number of errors: ", len(errors) if errors else 0)
```

Our sample dataset has been validated successfully with no errors.

Now let's see what happens when validating invalid data. We'll use the same
schema, but replace the previous dataset with the invalid variant.

```{python}
samples = utils.import_dataset("samples-invalid.csv")
data = {"samples": samples}
errors = validate_data(schema, data)
```

The error list contains one entry for every instance of a broken rule. Every
error-entry is a dictionary with information of what went wrong and where. The
message-field has the most useful human-readable information.

```{python}
for e in errors:
    print("- " + e["message"])
```

The error message starts with the name of the rule that has been broken,
followed by the table name, field name, and row number. The actual format of
the message varies from rule to rule, but the general idea is the same.

To find out the requirements for each rule, you can read the specifications in
the
[validation-rules](https://github.com/Big-Life-Lab/PHES-ODM-Validation/tree/6-jupyter-example/validation-rules)
directory.

# Schema generation

You can generate your own schema from a `parts.csv` file.
The resulting schema can then be used for validation.

```{python}
parts = utils.import_dataset(join(ASSET_DIR, "parts.csv"))
schema = generate_cerberus_schema(parts)
```

The resulting schema can also be exported to a YAML file for future use.

```{python}
#| eval: false
utils.export_schema(schema, "my_schema.yml")
```

# Customizing a Validation Schema

```{python}
#| echo: false
import os
import sys
sys.path.append("../../../src")

from rich.pretty import pprint

from odm_validation.doc_utils import (
    pprint_csv_file,
    pprint_dict_list,
    pprint_json_file
)
from odm_validation.utils import (
    import_csv_file,
    import_yaml_file
)
from odm_validation.validation import (
    validate_data,
    generate_validation_schema
)
```

## Context

When using any one of the [validation schemas](../../../assets/validation-schemas/) in the repository, you may find that they do not meet the validation requirements for your data. Currently, the best way to overcome this limitation is create a new validation schema that is an extension of an existing one. In this tutorial we will go over how you can do this using the `schema_additions` parameter in the [generate_validation_schema](../../specs/generate-validation-schema.md) function.

## Extending a validation schema

### Setting the scenario

As an example, consider the `healthReg` part in the dictionary which is described as *The health planning authority where the site or insititute is located*. `healthReg` is a `varchar` column in the `sites` table. Finally, `healthReg` does not have any validation requirements, the values for this column need only be a string. However, it should not be hard to imagine that public health agencies within a province would want this column to only have health regions within their province.

For example, public health agencies within Ontario may only want to allow the following health regions in this column,

```{python}
#| echo: false
allowed_health_regs_file = import_csv_file("./allowed-health-regs.csv")
pprint_dict_list(allowed_health_regs_file, title = "Ontario Health Regions")
```

The validation schema we will be extending in this tutorial is shown below,

```{python}
#| echo: false

validation_schema_to_extend = import_yaml_file("./base-validation-schema.yml")
pprint(validation_schema_to_extend)
```

For the sake of brevity this schema only contains a couple out of the numerous columns that are in the `sites` table. The two columns are:

1. `siteID`: which is the primary key for the table and is mandatory; and
2. `healthReg`: which is the column whose validation rule we want to modify

As we can see, the only constraint for the `healthReg` column is that it has to be a string. If we validate the dataset shown below,

```{python}
#| echo: false
invalid_dataset = import_csv_file("./invalid-dataset.csv")

pprint_dict_list(invalid_dataset, title = "Invalid Sites Table")
```

using the `validate_data` function with our current validation schema, we get the errors shown below,

```{python}
#| echo: false

pprint(validate_data(
    validation_schema_to_extend,
    {
        "sites": invalid_dataset
    }
))
```

As we can see, we're not getting any errors for the `healthReg` column. The only errors are due to the missing `siteID` column in the data.

### Using the `schema_additions` parameter

Let's see how we can extend the original schema to restrict the values in the `healthReg` column. As was said earlier, the `schema_additions` parameter in the `generate_validation_schema` function can help with this. The parameter is a Python dictionary that has the following shape:

1. The top level fields consists of the names of the tables whose schemas need to be extended
2. These table names themselves should contain a Python dictionary. The fields here contain the names of the table columns that need to be extended.
3. Finally, each column name should contain a Python dictionary with the names of the validation rules to be updated along with their values. Only certain validation rules can currently be extended. For the list of supported rules refer to the `generate_validation_schema` documentation.

For our current use case, we need to update the `healthReg` column in the `sites` table with the list of allowable values from the CSV file we printed above. The code for building the `schema_additions` parameter can be seen below,

```{python}
# schema_additions should be a dictionary
schema_additions = {
    # Whose top level fields contain the names of the table to modify
    "sites": {
        # Within which we specify the names of the columns to modify that belong to that table
        # This is also a Python dictionary
        "healthReg": {
            # within we specify the names of the rules to specify and their values
            # Here we add the list of allowed of health regions from the CSV file as a string
            "allowed": list(map(lambda healthRegRow: healthRegRow["healthReg"], allowed_health_regs_file))
        }
    }
}
```

with its result printed below,

```{python}
#| echo: false

pprint(schema_additions)
```

We can use it to extend our schema using the code below,

```{python}
#| output: false

parts_file = import_csv_file("./parts.csv")
updated_validation_schema = generate_validation_schema(
    parts_file,
    schema_additions = schema_additions
)
```

with our new validation schema printed below,

```{python}
#| echo: false

pprint(updated_validation_schema)
```

As we can see, the `healthReg` column now has a new rule called `allowed` which has our Ontario specific values. 

Finally, lets validate our original dataset with our new validation schema to make sure its working correctly,

```{python}
pprint(validate_data(
    updated_validation_schema,
    {
        "sites": invalid_dataset
    }
))
```

We now see errors for our `healthReg` column, specifically the `invalid_category` entries in the printed validation repo.

## Conclusion

In this tutorial we learned how to extend the validation schemas provided with the package to meet the needs of the different validation contexts within the wastewater ecosystem. Make sure to check that the rule you're trying to modify or add is supported by the package by looking at the `schema_additions` parameter in the `generate_validation_schema` documentation.